{
    "copyright_text": "CC BY",
    "description": "You can use decorators in your Python code to change the behavior of one\nor several functions. Many popular libraries are based on decorators.\nFor example, you can use decorators to register functions as web\nendpoints, mark functions for JIT compilation, or profile your\nfunctions.\n\nUsing decorators makes your code simpler and more readable. However, to\nunlock the full capability of decorators, you should also be comfortable\nwriting your own. In this tutorial, you'll learn how decorators work\nunder the hood, and you'll get plenty of practice writing your own\ndecorators.\n\nYou'll be introduced to necessary background information about how\nfunctions are first-class objects in Python and how you can define inner\nfunctions. You'll learn how to unwrap the ``@decorator`` syntactic sugar\nand how to write solid decorators that you can use in your code.\n\nBeing comfortable with using and creating decorators will make you a\nmore efficient Python programmer.\n",
    "language": "eng",
    "recorded": "2023-04-20",
    "related_urls": [
        {
            "label": "Conference Website",
            "url": "https://us.pycon.org/2023/"
        },
        {
            "label": "Presentation Webpage",
            "url": "https://us.pycon.org/2023/schedule/presentation/121/"
        }
    ],
    "speakers": [
        "Geir Arne Hjelle"
    ],
    "thumbnail_url": "https://i.ytimg.com/vi/wHpphKNegSI/maxresdefault.jpg",
    "title": "Introduction to Decorators: Power Up Your Python Code",
    "videos": [
        {
            "type": "youtube",
            "url": "https://www.youtube.com/watch?v=wHpphKNegSI"
        }
    ]
}