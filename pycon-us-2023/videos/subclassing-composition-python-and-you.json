{
    "copyright_text": "CC BY",
    "description": "Ever seen a code base where understanding a simple method meant jumping\nthrough tangled class hierarchies? We all have! And while \"Favor\ncomposition over inheritance!\" is almost as old as object-oriented\nprogramming, strictly avoiding all types of subclassing leads to\nverbose, un-Pythonic code. So, what to do?\n\nThe discussion on composition vs. inheritance is so frustrating because\nfar-reaching design decisions like this can only be made with the\necosystem in mind \u2013 and because there's more than one type of\nsubclassing!\n\nLet's take a dogma-free stroll through the types of subclassing through\na Pythonic lens and untangle some patterns and trade-offs together. By\nthe end, you'll be more confident in deciding when subclassing will make\nyour code more Pythonic and when composition will improve its clarity.\n",
    "language": "eng",
    "recorded": "2023-04-22",
    "related_urls": [
        {
            "label": "Conference Website",
            "url": "https://us.pycon.org/2023/"
        },
        {
            "label": "Presentation Webpage",
            "url": "https://us.pycon.org/2023/schedule/presentation/7/"
        }
    ],
    "speakers": [
        "Hynek Schlawack"
    ],
    "thumbnail_url": "https://i.ytimg.com/vi/k8MT5liCQ7g/maxresdefault.jpg",
    "title": "Subclassing, Composition, Python, and You",
    "videos": [
        {
            "type": "youtube",
            "url": "https://www.youtube.com/watch?v=k8MT5liCQ7g"
        }
    ]
}