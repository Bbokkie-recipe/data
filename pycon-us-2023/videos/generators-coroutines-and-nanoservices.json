{
    "copyright_text": "CC BY",
    "description": "Generator functions have been a part of Python for many years already,\nand are a well known technique for creating iterators. But generators\nhave a few lesser-known aspects, including their \u201csend\u201d method and the\n\u201cyield from\u201d syntax. Many Python developers shy away from using them,\nunsure of what they would do, or how they would be useful \u2014 seeing\ncoroutines as a solution looking for a problem.\n\nIn this talk, I\u2019ll tell you why coroutines can be useful, and how\nthinking about them as in-process \u201cnanoservices\u201d puts us in the right\nframe of mind to determine when they would and wouldn\u2019t be appropriate.\nAmong the topics we\u2019ll explore are:\n",
    "language": "eng",
    "recorded": "2023-04-21",
    "related_urls": [
        {
            "label": "Conference Website",
            "url": "https://us.pycon.org/2023/"
        },
        {
            "label": "Presentation Webpage",
            "url": "https://us.pycon.org/2023/schedule/presentation/92/"
        }
    ],
    "speakers": [
        "Reuven M. Lerner"
    ],
    "thumbnail_url": "https://i.ytimg.com/vi/tHLOtZNsCBc/maxresdefault.jpg",
    "title": "Generators, coroutines, and nanoservices",
    "videos": [
        {
            "type": "youtube",
            "url": "https://www.youtube.com/watch?v=tHLOtZNsCBc"
        }
    ]
}