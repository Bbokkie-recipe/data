{
    "copyright_text": "CC BY",
    "description": "For any software project with an established user base, introducing\nbreaking changes in its API can be daunting. To minimize disruptions for\nusers, projects are incentivized to plan these transitions carefully,\nwhich may include *API deprecations*, where messages warning users of\nupcoming changes are added to the affected APIs while they\u2019re still\nfunctional. However, this imposes extra workload for the project\u2019s\nmaintainers, as both old and new versions of the API must be kept\nfunctional throughout the transition period.\n\nAs a maintainer of a software project undergoing preparations for a\nmajor version release, I recently found myself in a similar situation:\nour goal was to provide backward compatibility with the previous version\nfor as long as possible, without impacting the development of new\nfeatures. Practically, this included dealing with a radical\nrestructuring of the Python codebase, resulting in hundreds of modules\nbeing relocated, split, or removed. Was there any way to ensure that the\ndeprecated import paths could still be used without errors, without\nhaving to maintain two separate versions of the package?\n\nFortunately, the answer to \u201ccan you do that in Python?\u201d is more often\nthan not \u201cyes!\u201d; for this particular case, the path to success turned\nout to be through the ``importlib`` package of the standard library. For\nsomething so close to Python\u2019s internals, ``importlib`` is both\naccessible and extensible, allowing ordinary code to customize almost\ncompletely how and what modules can be imported---including modules that\nare not there anymore!\n\nThis intermediate-level talk will present a complete solution based on\nPython\u2019s importlib machinery that allows to redirect modules or module\nattributes with deprecations in a simple, robust, and scalable way.\nWhile the context of the solution is especially relevant for project\nmaintainers, the focus is on importlib techniques that are generally\napplicable.\n",
    "language": "eng",
    "recorded": "2023-04-23",
    "related_urls": [
        {
            "label": "Conference Website",
            "url": "https://us.pycon.org/2023/"
        },
        {
            "label": "Presentation Webpage",
            "url": "https://us.pycon.org/2023/schedule/presentation/128/"
        }
    ],
    "speakers": [
        "Ludovico Bianchi"
    ],
    "thumbnail_url": "https://i.ytimg.com/vi/YtuYH3gj_X4/maxresdefault.jpg",
    "title": "What's old is new again: using Python's import machinery to handle API deprecations",
    "videos": [
        {
            "type": "youtube",
            "url": "https://www.youtube.com/watch?v=YtuYH3gj_X4"
        }
    ]
}