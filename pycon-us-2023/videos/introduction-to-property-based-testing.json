{
    "copyright_text": "CC BY",
    "description": "Has testing got you down? Ever spent a day writing tests, only to\ndiscover that you missed a bug because of some edge case you didn\u2019t know\nabout? Does it ever feel like writing tests is just a formality - that\nyou already know your test cases will pass?\n\n**Property-based testing might be just what you need!**\n\nAfter this introduction to property-based testing, you\u2019ll be comfortable\nwith Hypothesis, a friendly but powerful property-based testing library.\nYou\u2019ll also known how to check and enforce robust properties in your\ncode, and will have hands-on experience finding real bugs.\n\nWhere traditional example-based tests require you to write out each\nexact scenario to check - for example, ``assert divide(3, 4) == 0.75`` -\nproperty-based tests are *generalised* and *assisted*. You describe what\nkinds of inputs are allowed, write a test that should pass for any of\nthem, and Hypothesis does the rest!\n\n.. code:: python\n\n   from hypothesis import given, strategies as st\n\n   @given(a=st.integers(), b=st.integers())\n   def test_divide(a, b):\n      result = a / b\n      assert a == b * result\n\nThere\u2019s the obvious ``ZeroDivisionError``, fixable with\n``b = st.integers().filter(lambda b: b != 0)``, but there\u2019s another bug\nlurking. Can you see it? Hypothesis can!\n\n**Audience:** This tutorial is for anybody who regularly writes tests in\nPython, and would like an easier and more effective way to do so. We\nassume that you are comfortable with traditional unit tests - reading,\nrunning, and writing; as well as familar with ideas like assertions.\nMost attendees will have heard \"given, when, then\" and \"arrange, act,\nassert\". You may or may not have heard of pre- and post-conditions - we\nwill explain what \"property-based\" means without reference to Haskell or\nanything algebraic.\n",
    "language": "eng",
    "recorded": "2023-04-20",
    "related_urls": [
        {
            "label": "Conference Website",
            "url": "https://us.pycon.org/2023/"
        },
        {
            "label": "Presentation Webpage",
            "url": "https://us.pycon.org/2023/schedule/presentation/84/"
        }
    ],
    "speakers": [
        "Zac Hatfield-Dodds",
        "Ryan Soklaski"
    ],
    "thumbnail_url": "https://i.ytimg.com/vi/YwYIDpze52s/maxresdefault.jpg",
    "title": "Introduction to Property-Based Testing",
    "videos": [
        {
            "type": "youtube",
            "url": "https://www.youtube.com/watch?v=YwYIDpze52s"
        }
    ]
}