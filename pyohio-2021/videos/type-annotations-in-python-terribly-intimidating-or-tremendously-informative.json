{
    "description": "Many software developers have written a Python program without\nexplicitly declaring the types of the parameters for a function's\nparameters or return values. Since the Python programming language now\nsupports type annotations, many people in the community are exploring\nthis way to describe the data that a function accepts as input and\nproduces as output. When you start to apply Python's type annotations,\ntheir syntax and meaning can be confusing and it is common to wonder\nwhether or not there is any benefit to adding them at all!\n\nThis presentation will introduce Python's type annotations by\niteratively applying them to a function that does not have explicit\ntypes. After explaining how to use the types available in the ``typing``\npackage, this talk will illustrate the ways in which a static type\nchecker like ``mypy`` can find bugs in a Python program before it is\nexecuted. People who watch this talk will gain the knowledge they need\nto start writing their first type annotations, use them to improve their\nPython programs, and ultimately find them to be beneficial.\n",
    "language": "eng",
    "recorded": "2021-07-31",
    "related_urls": [
        {
            "label": "Conference Website",
            "url": "https://www.pyohio.org/2021/"
        }
    ],
    "speakers": [
        "Gregory M. Kapfhammer"
    ],
    "thumbnail_url": "https://i.ytimg.com/vi/gT2PzTSkT1o/maxresdefault.jpg",
    "title": "Type Annotations in Python: Terribly Intimidating or Tremendously Informative?",
    "videos": [
        {
            "type": "youtube",
            "url": "https://youtu.be/gT2PzTSkT1o"
        }
    ]
}