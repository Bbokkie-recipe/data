{
    "description": "The main building blocks of Django REST Framework projects, i.e. Views, Serializers, Managers, and Querysets allow developers to implement complex APIs with very little code repetition while reusing built-ins for essential API features. Developers feel guided by DRF to architect the project in a \u201cDon\u2019t Repeat Yourself\u201d way by using inheritance, nesting, annotations, and model / app-based separation of concerns. They can group code in viewsets, inherit from base classes, reuse the same serializer across views, nest serializers into others, compute fields dynamically with ORM annotations, select or prefetch relations for performance, organize custom behavior with managers and querysets, and much more. All this DRYness is great because it integrates well with common web API concerns like permissions, pagination, filters, etc.\n\nBased on our multi-year experience in building and maintaining several large Django projects, while using those built-in concepts really yields a DRY code, the overuse also results in a codebase full of complicated bugs and performance issues, especially related to ORM usage. View, serializer, and model methods are often heavily coupled to querysets\u2019 annotations and prefeches, but those methods are spread across the codebase. Django\u2019s default queryset laziness, together with its heavy usage of inheritance and nesting is the perfect recipe for a codebase where N+1 issues and heavy unnecessary queries can happen in any line of code after some less careful change.\n\nFor example, to prevent N+1 issues, if a serializer method field uses a filtered relationship, you must ensure this relationship is prefetched in all querysets related to that serializer. But this serializer can be nested into others, so you must now be careful to change all queryset references in seemingly unrelated views. Other sorts of \u201cchange amplification\u201d situations also happen on large DRF codebases with heavy ORM usage. Requiring developers to be careful while navigating through lots of files to perform changes isn\u2019t reasonable. Maybe being DRY is leading to the wrong abstraction?\n\nIt\u2019s possible to design a better architecture that\u2019s optimized both for enabling changes and avoiding performance regressions. With a new custom data prefetching layer that keeps compatibility with serializers and views, we can respect DRY while keeping performance and maintainability. That\u2019s what we\u2019ve been doing in our Django projects, and we will share our learnings in this talk. Hopefully, that applies to other maintainers of complex DRF projects.\n\nHere's the planned outline:\n- Django REST Framework is DRY: the good side\n- Trade-offs of DRY in DRF: when reusing serializers leads to Change Amplification on prefetches and annotations\n- How view querysets and serializers are coupled\n- How vanilla Django suffers from the same issues\n- Incomplete solutions that weren't enough for us\n- Solving with a data prefetching layer: [django-virtual-models](https://github.com/vintasoftware/django-virtual-models/)\n- Warn programmers during dev time about missing prefetches and annotations for each serializer\n- Automatically run necessary prefetches and annotations\n- Automatically prevent unnecessary prefetches and annotations\n- Keep serializer nesting support\n- Keep `SerializerMethodField` support\n- Other solutions, including [django-readers](https://github.com/dabapps/django-readers/)",
    "language": "eng",
    "recorded": "2022-10-19",
    "related_urls": [
        {
            "label": "Conference Website",
            "url": "https://2022.djangocon.us"
        }
    ],
    "speakers": [
        "Fl√°vio Juvenal"
    ],
    "thumbnail_url": "https://i.ytimg.com/vi/arxSbzxXo7s/maxresdefault.jpg",
    "title": "Why large Django projects need a data (prefetching) layer",
    "videos": [
        {
            "type": "youtube",
            "url": "https://www.youtube.com/watch?v=arxSbzxXo7s"
        }
    ]
}
